Pseudocode for mathematical analysis
This is used to solve the efficiency class using Big-Oh notation.
************************************************************************
Algorithm 1: End-to-Beginning Algorithm
                                            Step Count Part 1
Set n = size of vector A                +1
initialize vector H with all zeros      +1
for i = n-2 down to 0 do                n-1 times
    for j= i+1 to n do                  n-i+1 times
        if(A[i] >= A[j])                1+max(1+max(2,0),0) = 4
            if(H[i]<=H[j])
                H[i]=H[j]+1
    endfor
endfor
                                            Step Count Part 2
max = size of H +1                      +2
initialize vector R with max length     +1
initialize index = max - 1              +2
initialize j = 0                        +1
for 0 to n do                           n+1 times
    if(H[i] == index)                   1+max(5,0)
    {
        R[j] = A at index i
        decrement index
        increment j
    }
endfor
return sequence R with max              +1

************************************************************************
Proving efficiency class of Algorithm 1:
Step Count = Part 1 + Part 2

Part 1:
n-2 n
SUM SUM 4
i=0 j=i+1

n-2
SUM [4(n-(i+1)+1)] = 4(n-i)
i=0

  n-2
4 SUM n-i  //do the split
  i=0

        n-2      n-2
4 ( n + SUM n -  SUM i )  i=1 bc i=0 yields o
        i=1      i=1

4 (n +n(n-2) - (n-2)(n-1)/2)
2 (n+ 2n^2 - 4n - n^2 + 3n -2)
2n^2 - n -4 //step count for part 1

Part 2:
6 + (n+1)(1+max(5,0))+1
6n+13 //step count for part 2

Step Count = Part 1 + Part 2
           = 2n^2 - n - 4 + (6n +13)
           = 2n^2 + 5n + 9
           Therefore the efficiency class is O(n^2)
************************************************************************
Algorithm 2: Powerset Algorithm
                                              Step Count
Set n = size of Vector A                      +1
initialize sequence Best                      +1
initialize vector Stack with n+1 length       +1
initialize k = 0                              +1

while true                                    2^n

  if (Stack[k] < n)                           1+max(4,4)
    Stack[k+1] = Stack[k] + 1
    k = k+1
  else
    Stack[k-1] = Stack[k-1] + 1
    k = k-1

  if k = 0                                    1+max(1,0)
    break

  initialize sequence Candidate               +1
  for i = 1 to n do                           n
     push to candiate(A[Stack[i]-1])          +4
  endfor

   if candidate is nonincreasing             max(max(1,0),0)
     if size of Candidate > size of Best     
       Best = Candidate                      

endwhile

return sequence Best                         1
************************************************************************
Proving efficiency class of Algorithm 2:

Step count f(n) = 1+1+1+1 + 2^n(1+max(4,4) + 1+max(1,0) + 1+(4n) + (max(max(1,0),0)) + 1
                  4 + 2^n(5 + 2 + 1+4n + 1) + 1
           f(n) = 5 + 2^n(9+4n) -> O(n * 2^n)
************************************************************************
