Pseudocode for mathematical analysis
This is used to solve the efficiency class using Big-Oh notation.

Algorithm 1: End-to-Beginning Algorithm
                                            Step Count Part 1
Set n = size of vector A                +1
initialize vector H with all zeros      +1
for i = n-2 down to 0 do                n-1 times
    for j= i+1 to n do                  n-i+1 times
        if(A[i] >= A[j])                1+max(1+max(2,0),0) = 4
            if(H[i]<=H[j])
                H[i]=H[j]+1
    endfor
endfor
                                            Step Count Part 2
max = size of H +1                      +2
initialize vector R with max length     +1
initialize index = max - 1              +2
initialize j = 0                        +1
for 0 to n do                           n+1 times
    if(H[i] == index)                   1+max(5,0)
    {
        R[j] = A at index i
        decrement index
        increment j
    }
endfor
return sequence R with max              +1

************************************************************************
Proving efficiency class of Algorithm 1: 
Step Count = Part 1 + Part 2

Part 1:
n-2 n
SUM SUM 4
i=0 j=i+1

n-2 
SUM [4(n-(i+1)+1)] = 4(n-i)
i=0 

  n-2 
4 SUM n-i  //do the split
  i=0 

        n-2      n-2
4 ( n + SUM n -  SUM i )  i=1 bc i=0 yields o
        i=1      i=1

4 (n +n(n-2) - (n-2)(n-1)/2)
2 (n+ 2n^2 - 4n - n^2 + 3n -2)
2n^2 - n -4 //step count for part 1

Part 2:
6 + (n+1)(1+max(5,0))+1
6n+13 //step count for part 2

Step Count = Part 1 + Part 2
           = 2n^2 - n - 4 + 6n +13
           = 2n^2 + 5n + 9 
           Therefore the efficiency class is Oh(n^2)
************************************************************************

